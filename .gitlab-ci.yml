
include:
#  - local: 'templates/-0-tests-rules/template.yml'
#    inputs:
#      test-pattern: '/^\d+\.\d+\.\d+$/'

  - local: 'templates/auto-gitlab/template.yml'
    inputs:
      auto-rebase: true
      auto-approve: true

      auto-merge: true
      auto-remove-source-branch: true

      auto-tag: true
      auto-tag-pattern: '/^\d+\.\d+\.\d+$/'
      auto-tag-version-major: 0
      auto-tag-version-minor: 4

      auto-release: true
      extra-needs-jobs:
        - job: test-assets

  - local: 'templates/build-ansible-collection/template.yml'
    inputs:
      collection-path: "test_examples/ansible_galaxy"

variables:
  CI_DEBUG_TRACE: "true"

stages:
  - commit-rules-test
  - combine-rules-test
  - generator
  - build
  - push
  - auto-merge
  - auto-release

package-example:
  stage: generator
  extends: [ .package-cache, .release-package-template ]
  before_script:
    - !reference [ .install-utility ]
  parallel:
    matrix:
      - PACKAGE_FILE: "package/file1"
      - PACKAGE_FILE: "package/file2"
  script:
    - |
      {
        echo "release_package_name=$PACKAGE_FILE"
        echo "release_package_url=${CI_SERVER_URL}/${PACKAGE_FILE}"
        echo "release_package_link_type=other"
        echo "release_package_direct_asset_path=${PACKAGE_FILE}"
      } > release_after_script.env


docker-example:
  stage: generator
  extends: [ .package-cache, .release-docker-template ]
  before_script:
    - !reference [ .install-utility ]
  parallel:
    matrix:
      - DOCKER_REPO: "${CI_REGISTRY}/${CI_PROJECT_PATH}/example_1"
        DOCKER_TAG: "0.0.1"
      - DOCKER_REPO: "${CI_REGISTRY}/${CI_PROJECT_PATH}/example_2"
        DOCKER_TAG: "0.0.1"
  script:
    - |
      {
        echo "release_docker_repository=${DOCKER_REPO}"
        echo "release_docker_tag=${DOCKER_TAG}"
      } > release_after_script.env





#spec:
#  inputs:
#    merge_branch_action:
#      options: ['skip', 'delete']
#      type: string
#      default: 'skip'
#    docker_builder:
#      type: boolean
#      default: false
#    helm_builder:
#      type: boolean
#      default: false
#    gradle_builder:
#      type: boolean
#      default: false
#    ansible_collection_build:
#      type: boolean
#      default: false
#    release_version:
#      type: string
#      default: ''
#---
#workflow:
#  auto_cancel:
#    on_job_failure: all
#
#stages:
#  - test_code
#  - build
#  - test_build
#  - deploy
#  - test_deploy
#  - final
#
#debug:job:
#  stage: test_code
#  script:
#    - 'sleep 1'
#  rules:
#    - if: $CI_DEBUG_TRACE == "true"
#      when: always
#    - when: never
#
#docker_builder:trigger:
#  stage: build
#  trigger:
#    include:
#      - project: 'library/ci'
#        ref: 'main'
#        file: 'docker_build/.gitlab-ci.yaml'
#    strategy: depend
#  rules:
#    - if: '"$[[ inputs.docker_builder ]]" == "true"'
#      when: always
#    - when: never
#
#helm_builder:trigger:
#  stage: build
#  variables:
#    MERGE_BRANCH_ACTION: "$[[ inputs.merge_branch_action | expand_vars ]]"
#  trigger:
#    include:
#      - project: 'library/ci'
#        ref: 'main'
#        file: 'helm_build/.gitlab-ci.yaml'
#    strategy: depend
#  rules:
#    - if: '"$[[ inputs.helm_builder ]]" == "true"'
#      when: always
#    - when: never
#
#gradle_builder:trigger:
#  stage: build
#  trigger:
#    include:
#      - project: 'library/ci'
#        ref: 'main'
#        file: 'gradle_build/.gitlab-ci.yaml'
#    strategy: depend
#  rules:
#    - if: '"$[[ inputs.gradle_builder ]]" == "true" && $CI_COMMIT_TAG'
#      when: always
#    - when: never
#
#ansible_collection_build:trigger:
#  stage: build
#  trigger:
#    include:
#      - project: 'library/ci'
#        ref: 'main'
#        file: 'ansible_collection_build/.gitlab-ci.yaml'
#    strategy: depend
#  rules:
#    - if: '"$[[ inputs.ansible_collection_build ]]" == "true" && $CI_COMMIT_REF_PROTECTED == "true"'
#      when: always
#    - when: never
#
#release:trigger:
#  stage: final
#  variables:
#    GRADLE_BUILDER: "$[[ inputs.gradle_builder ]]"
#  trigger:
#    include:
#      - project: 'library/ci'
#        ref: 'main'
#        file: 'release/.gitlab-ci.yaml'
#    strategy: depend
#  rules:
#    - if: '$CI_COMMIT_TAG'
#      when: always
#    - when: never
#
#auto_merge:trigger:
#  stage: final
#  variables:
#    MERGE_BRANCH_ACTION: "$[[ inputs.merge_branch_action | expand_vars ]]"
#  trigger:
#    include:
#      - project: 'library/ci'
#        ref: 'main'
#        file: 'auto_merge/.gitlab-ci.yaml'
#    strategy: depend
#  needs:
#    - job: docker_builder:trigger
#      optional: true
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#      when: always
#    - when: never
