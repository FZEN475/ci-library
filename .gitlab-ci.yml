
#include:
##  - local: 'templates/-0-tests-rules/template.yml'
##    inputs:
##      test-pattern: '/^\d+\.\d+\.\d+$/'
#
#  - local: 'templates/auto-gitlab/template.yml'
#    inputs:
#      auto-rebase: true
#      auto-approve: true
#
#      auto-merge: true
#      auto-remove-source-branch: true
#
#      auto-tag: true
#      auto-tag-pattern: '/^\d+\.\d+\.\d+$/'
#      auto-tag-version-major: 0
#      auto-tag-version-minor: 4
#
#      auto-release: true
#      extra-needs-jobs:
#        - job: test-assets
#
#variables:
#  CI_DEBUG_TRACE: "true"
#
#stages:
#  - commit-rules-test
#  - combine-rules-test
#  - auto-merge
#  - auto-release
#
#
#test-assets:
#  stage: auto-merge
#  cache:
#    - key: "$ARTIFACTS_DIR"
#      paths:
#        - "$ARTIFACTS_DIR"
#  script:
#    - mkdir -p "$ARTIFACTS_DIR"
#    - echo "Test" > "$ARTIFACTS_DIR/test.txt"
#    - |
#      {
#        echo "docker_image=docker_image"
#        echo "docker_image_digest=docker_image_digest"
#        echo "docker_repository=docker_repository"
#        echo "docker_tag=docker_tag"
#        echo "docker_digest=docker_digest"
#      } > docker.env
#  artifacts:
#    reports:
#      dotenv:
#        - docker.env

stages:
  - release

.gitlab-api-tags-test: |
  api_get_tags() {
    local token="${1:?Не передан токен авторизации}"
    local search="${2:-}"  # Можно передавать фильтр
  
    : "${CI_API_V4_URL:?Не задана переменная CI_API_V4_URL}"
    : "${CI_PROJECT_ID:?Не задана переменная CI_PROJECT_ID}"
  
    local api_url="$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/tags"
  
    tag_list=$(curl -s -f -X GET \
      -H "Authorization: Bearer ${token}" \
      --data-urlencode "order_by=version" \
      --data-urlencode "sort=desc" \
      $( [ -n "$search" ] && echo "--data-urlencode search=$search" ) \
      "$api_url")
  
    echo "$tag_list"
  }
  
  get_last_release_tag() {
    local tags_json="${1:-[]}"
    echo "$tags_json" | jq -r 'if type=="array" and length>0 then .[0] else empty end'
  }
  
  get_patch_from_tag() {
    local tag="$1"
  
    # Убираем "v" в начале, если есть
    tag="${tag#v}"
  
    # Разбиваем на части
    set -- $(echo "$tag" | tr '.' ' ')
    local major="$1"
    local minor="$2"
    local patch="$3"
  
    # Проверяем, что patch — число
    case "$patch" in
      ''|*[!0-9]*) patch=0 ;;
    esac
  
    echo "$patch"
  }

  get_next_tag() {
    local token="${1:?Не передан токен авторизации}"
  
    : "${CI_API_V4_URL:?Не задана переменная CI_API_V4_URL}"
    : "${CI_PROJECT_ID:?Не задана переменная CI_PROJECT_ID}"
    : "${CI_DEFAULT_BRANCH:?Не задана переменная CI_DEFAULT_BRANCH}"
  
    # Получаем теги с нужным мажором и минором, отсортированные по версии (desc)
    TAGS_JSON=$(api_get_tags "$token" "${AUTO_TAG_VERSION_PREFIX}${AUTO_TAG_VERSION_MAJOR}.${AUTO_TAG_VERSION_MINOR}." | tr -d '\r' )
  
    printf '%s\n' "$TAGS_JSON" | jq .
  
    LAST_TAG=$(get_last_release_tag "$TAGS_JSON")

    log_info "$LAST_TAG" 
  
    if [ -z "$LAST_TAG" ]; then
      patch=0
      ref="$CI_DEFAULT_BRANCH"
    else
      patch=$(get_patch_from_tag "$(echo "$LAST_TAG" | jq -r '.name')")
      patch=$((patch + 1))
      ref="$CI_COMMIT_SHA"
    fi

    # Формируем имя нового тега
    new_tag="${AUTO_TAG_VERSION_PREFIX}${AUTO_TAG_VERSION_MAJOR}.${AUTO_TAG_VERSION_MINOR}.${patch}"
    log_info "Создаем тег: $new_tag (ref: $ref)"


  }


release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/cli:latest
  before_script:
    - !reference [ .gitlab-api-tags-test ]
    - echo get_next_tag "$CI_JOB_TOKEN"
#  rules:
#    - if: $CI_COMMIT_TAG                  # Run this job when a tag is created manually
  script:
    - |
      echo "123"
      
      
      

#      glab release create "$CI_COMMIT_TAG" --name "Release $CI_COMMIT_TAG" \
#        --assets-links="[{\"name\":\"${DARWIN_AMD64_BINARY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${DARWIN_AMD64_BINARY}\"},{\"name\":\"${LINUX_AMD64_BINARY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_BINARY}\"}]"
#  release:
#    tag_name: $CI_COMMIT_TAG
#    name: 'Release $CI_COMMIT_TAG'
#    description: 'Release created using the CLI.'



#spec:
#  inputs:
#    merge_branch_action:
#      options: ['skip', 'delete']
#      type: string
#      default: 'skip'
#    docker_builder:
#      type: boolean
#      default: false
#    helm_builder:
#      type: boolean
#      default: false
#    gradle_builder:
#      type: boolean
#      default: false
#    ansible_collection_build:
#      type: boolean
#      default: false
#    release_version:
#      type: string
#      default: ''
#---
#workflow:
#  auto_cancel:
#    on_job_failure: all
#
#stages:
#  - test_code
#  - build
#  - test_build
#  - deploy
#  - test_deploy
#  - final
#
#debug:job:
#  stage: test_code
#  script:
#    - 'sleep 1'
#  rules:
#    - if: $CI_DEBUG_TRACE == "true"
#      when: always
#    - when: never
#
#docker_builder:trigger:
#  stage: build
#  trigger:
#    include:
#      - project: 'library/ci'
#        ref: 'main'
#        file: 'docker_build/.gitlab-ci.yaml'
#    strategy: depend
#  rules:
#    - if: '"$[[ inputs.docker_builder ]]" == "true"'
#      when: always
#    - when: never
#
#helm_builder:trigger:
#  stage: build
#  variables:
#    MERGE_BRANCH_ACTION: "$[[ inputs.merge_branch_action | expand_vars ]]"
#  trigger:
#    include:
#      - project: 'library/ci'
#        ref: 'main'
#        file: 'helm_build/.gitlab-ci.yaml'
#    strategy: depend
#  rules:
#    - if: '"$[[ inputs.helm_builder ]]" == "true"'
#      when: always
#    - when: never
#
#gradle_builder:trigger:
#  stage: build
#  trigger:
#    include:
#      - project: 'library/ci'
#        ref: 'main'
#        file: 'gradle_build/.gitlab-ci.yaml'
#    strategy: depend
#  rules:
#    - if: '"$[[ inputs.gradle_builder ]]" == "true" && $CI_COMMIT_TAG'
#      when: always
#    - when: never
#
#ansible_collection_build:trigger:
#  stage: build
#  trigger:
#    include:
#      - project: 'library/ci'
#        ref: 'main'
#        file: 'ansible_collection_build/.gitlab-ci.yaml'
#    strategy: depend
#  rules:
#    - if: '"$[[ inputs.ansible_collection_build ]]" == "true" && $CI_COMMIT_REF_PROTECTED == "true"'
#      when: always
#    - when: never
#
#release:trigger:
#  stage: final
#  variables:
#    GRADLE_BUILDER: "$[[ inputs.gradle_builder ]]"
#  trigger:
#    include:
#      - project: 'library/ci'
#        ref: 'main'
#        file: 'release/.gitlab-ci.yaml'
#    strategy: depend
#  rules:
#    - if: '$CI_COMMIT_TAG'
#      when: always
#    - when: never
#
#auto_merge:trigger:
#  stage: final
#  variables:
#    MERGE_BRANCH_ACTION: "$[[ inputs.merge_branch_action | expand_vars ]]"
#  trigger:
#    include:
#      - project: 'library/ci'
#        ref: 'main'
#        file: 'auto_merge/.gitlab-ci.yaml'
#    strategy: depend
#  needs:
#    - job: docker_builder:trigger
#      optional: true
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#      when: always
#    - when: never
