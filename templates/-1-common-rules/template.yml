
.logs-scripts: |
  # BEGSCRIPT

  set -e

  function log_info() {
      echo -e "[\\e[1;94mINFO\\e[0m] $*"
  }

  function log_warn() {
      echo -e "[\\e[1;93mWARN\\e[0m] $*"
  }

  function log_error() {
      echo -e "[\\e[1;91mERROR\\e[0m] $*"
  }

  function fail() {
    log_error "$*"
    exit 1
  }

.package-cache:
  cache:
    - key: apt-cache
      paths:
        - /var/cache/apt/archives
    - key: apk-cache
      paths:
        - /var/cache/apk
    - key: dnf-cache
      paths:
        - /var/cache/dnf
    - key: yum-cache
      paths:
        - /var/cache/yum

.install-tool: |
    install_tool() {
        tools="$*"
        
        # Определяем ОС
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            OS_ID="$ID"
        else
            OS_ID=""
        fi
        
        case "$OS_ID" in
            ubuntu|debian)
                if command -v apt-get >/dev/null 2>&1; then
                    apt-get update -qq
                    apt-get install -y -qq $tools
                else
                    echo "⚠️ apt-get не найден, установка пропущена"
                fi
                ;;
        
            alpine)
                if command -v apk >/dev/null 2>&1; then
                    apk add $tools
                else
                    echo "⚠️ apk не найден, установка пропущена"
                fi
                ;;
        
            centos|rhel|fedora|rocky|alma)
                if command -v dnf >/dev/null 2>&1; then
                    dnf install -y $tools
                elif command -v yum >/dev/null 2>&1; then
                    yum install -y $tools
                else
                    echo "⚠️ dnf/yum не найден, установка пропущена"
                fi
                ;;
        
            *)
                echo "⚠️ Неизвестная ОС ($OS_ID) — установка пропущена"
                ;;
        esac
    }

.register-ca: |
  register_ca() {
      crt_file="$1"
  
      if [ ! -f "$crt_file" ]; then
          log_warn "⚠️ Файл $crt_file не найден"
          return 0
      fi
  
      # Определяем ОС
      if [ -f /etc/os-release ]; then
          . /etc/os-release
          OS_ID="$ID"
          OS_NAME="$NAME"
      else
          log_warn "⚠️ Не удалось определить операционную систему"
          return 0
      fi
  
      log_info "ℹ️ Обнаружена ОС: $OS_NAME ($OS_ID)"
  
      case "$OS_ID" in
          ubuntu|debian)
              cp "$crt_file" /usr/local/share/ca-certificates/ 2>/dev/null || log_warn "⚠️ Не удалось скопировать файл"
              if command -v update-ca-certificates >/dev/null 2>&1; then
                  update-ca-certificates 2>/dev/null || log_warn "⚠️ Ошибка при обновлении сертификатов"
              else
                  log_warn "⚠️ Пакет ca-certificates не найден, обновление сертификатов пропущено"
              fi
              log_info "✅ Сертификат зарегистрирован (файл скопирован)"
              ;;
  
          alpine)
              cp "$crt_file" /usr/local/share/ca-certificates/ 2>/dev/null || log_warn "⚠️ Не удалось скопировать файл"
              if command -v update-ca-certificates >/dev/null 2>&1; then
                  update-ca-certificates 2>/dev/null || log_warn "⚠️ Ошибка при обновлении сертификатов"
              else
                  log_warn "⚠️ Пакет ca-certificates не найден, обновление сертификатов пропущено"
              fi
              log_info "✅ Сертификат зарегистрирован (файл скопирован)"
              ;;
  
          centos|rhel|fedora|rocky|alma)
              cp "$crt_file" /etc/pki/ca-trust/source/anchors/ 2>/dev/null || log_warn "⚠️ Не удалось скопировать файл"
              if command -v update-ca-trust >/dev/null 2>&1; then
                  update-ca-trust extract 2>/dev/null || log_warn "⚠️ Ошибка при обновлении сертификатов"
              else
                  log_warn "⚠️ Пакет ca-certificates не найден, обновление сертификатов пропущено"
              fi
              log_info "✅ Сертификат зарегистрирован (файл скопирован)"
              ;;
  
          *)
              log_warn "⚠️ Неизвестная ОС ($OS_ID) — регистрация сертификата пропущена"
              return 0
              ;;
      esac
  }




.install-utility:
  - !reference [ .logs-scripts ]
  - !reference [ .install-tool ]
  - install_tool curl jq openssl ca-certificates
  - !reference [ .register-ca ]
  - register_ca "$CI_SERVER_TLS_CA_FILE"


.push:
  only:
    - if: '$CI_PIPELINE_SOURCE != "push"'
      when: never
  not:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
  protected-only:
    - if: '$CI_COMMIT_REF_PROTECTED == "false"'
      when: never
  not-protected-only:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
      when: never

.merge:
  only:
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event"'
      when: never
  not:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
  source-protect-only:
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_PROTECTED == null || $CI_MERGE_REQUEST_SOURCE_BRANCH_PROTECTED == "false"'
      when: never
  not-source-protect-only:
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_PROTECTED == "true"'
      when: never
  target-protect-only:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == null || $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "false"'
      when: never
  not-target-protect-only:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true"'
      when: never

.tagged:
  only:
    - if: '$CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH != null'
      when: never
  with:
    - if: '$CI_COMMIT_TAG == null'
      when: never
  not:
    - if: $CI_COMMIT_TAG
      when: never
  pattern:
    - if: '$CI_COMMIT_TAG_PATTERN == "" || $CI_COMMIT_TAG !~ $CI_COMMIT_TAG_PATTERN'
      when: never


.unprotected-branch-commit:
  rules:
    - !reference [.push, only]
    - !reference [.push, not-protected-only]
    - !reference [.tagged, not]

.protected-branch-commit:
  rules:
    - !reference [.push, only]
    - !reference [.push, protected-only]
    - !reference [.tagged, not]

.merge-to-protected-branch:
  rules:
    - !reference [.merge, only]
    - !reference [.merge, target-protect-only]
#    - !reference [.tagged, not] -> У запросов на слияние не может быть прикреплённых тегов.

.tags-only-pattern:
  rules:
    - !reference [.tagged, only]
    - !reference [.tagged, pattern]
      

.release-docker-template:
  after_script:
    - source after_script.env
    - NORMALIZED_CI_JOB_NAME_SLUG=$(echo "$CI_JOB_NAME_SLUG" | sed 's/[^a-zA-Z0-9_]/_/g')
    - |
      {
        echo "release_notes_${NORMALIZED_CI_JOB_NAME_SLUG}_1_head=Docker image for tag $CI_COMMIT_TAG is now available"
        echo "release_notes_${NORMALIZED_CI_JOB_NAME_SLUG}_2_image=${release_docker_repository}:${release_docker_tag}"
        echo "release_notes_${NORMALIZED_CI_JOB_NAME_SLUG}_3_latest=${release_docker_repository}:latest"
      } > release_notes.env
  artifacts:
    reports:
      dotenv:
        - release_notes.env

.release-package-template:
  after_script:
    - source after_script.env
    - NORMALIZED_CI_JOB_NAME_SLUG=$(echo "$CI_JOB_NAME_SLUG" | sed 's/[^a-zA-Z0-9_]/_/g')
    - |
      asset_json=$(jq -n \
      --arg name "$release_package_name" \
      --arg url "$release_package_url" \
      --arg link_type "$release_package_link_type" \
      --arg direct_asset_path "/${release_package_direct_asset_path}" \
      '{"name": $name, "url": $url, "link_type": $link_type, "direct_asset_path": $direct_asset_path}' | jq -R -s '.'
      )
    - |
      {
        echo release_asset_${NORMALIZED_CI_JOB_NAME_SLUG}=$asset_json
      } > release_asset.env
  artifacts:
    reports:
      dotenv:
        - release_asset.env