# templates/build-ansible-collection/template.yml
spec:
  inputs:
#    job-name:
#      description: "Name of build job"
#      type: string
#      default: "ansible-galaxy-build"
    collection-path:
      description: "Collection source"
      type: string
    ansible-galaxy-extra-args:
      description: "Extra args for build"
      type: string
      default: ""
---

include:
  - local: 'templates/-1-common-rules/template.yml'

variables:
  COLLECTION_PATH: $[[ inputs.collection-path ]]
  ANSIBLE_GALAXY_EXTRA_ARGS: $[[ inputs.ansible-galaxy-extra-args ]]
#  IS_TAG_VALID: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ "^[0-9]+\\.[0-9]+\\.[0-9]+$"'


#.is_merge_request_rule:
#  - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"'
#    when: never
##  - if: '$CI_PIPELINE_SOURCE != "merge_request_event"'
##    when: never

stages:
  - build
  - push
    
# TODO: Не получилось пробрасывать динамические имена в другие component.inputs
# FIXME: Требуется вернуться к этому позже
# $[[ inputs.job-prefix | expand_vars ]]
build-ansible-galaxy-library:
  stage: build
  image: docker.io/cytopia/ansible:latest-tools
  before_script:
    - !reference [ .install-utility ]
  variables:
    PACKAGE_VERSION: "dev"
  script:
    - cd "$COLLECTION_PATH"
    - yq e ".version = \"${PACKAGE_VERSION}\"" -i galaxy.yml
    - 
    - ansible-galaxy collection build -f --output-path "${CI_PROJECT_DIR}/dist" "$ANSIBLE_GALAXY_EXTRA_ARGS"
#    - mkdir -p "$CI_PROJECT_DIR/$ARTIFACTS_DIR/$COLLECTION_PATH"
    - ls -all ./
#    - echo "$COLLECTION_PATH"
#    - mv ./*.tar.gz "$CI_PROJECT_DIR/$ARTIFACTS_DIR/$COLLECTION_PATH"/
  artifacts:
    name: "${CI_PROJECT_ID}-${CI_COMMIT_SHORT_SHA}"
    paths:
      - "${CI_PROJECT_DIR}/dist"
    expire_in: 1 day
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        PACKAGE_VERSION: "$CI_COMMIT_TAG"
    - when: always


push-ansible-galaxy-library:
  stage: push
  needs:
    - build-ansible-galaxy-library
  script:
    - cd "$COLLECTION_PATH"
    - NAMESPACE=$(yq e '.namespace' galaxy.yml)
    - NAME=$(yq e '.name' galaxy.yml)
    - VERSION=$(yq e '.version' galaxy.yml)
    - ARTIFACT=$(ls -1t dist/*.tar.gz | head -n1)
    - curl --header "JOB-TOKEN: $CI_JOB_TOKEN" \
        --upload-file "$ARTIFACT" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/$NAMESPACE-$NAME-$CI_COMMIT_TAG"
    - curl --header "JOB-TOKEN: $CI_JOB_TOKEN" \
        --upload-file "$ARTIFACT" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/$NAMESPACE-$NAME-latest"
#    - |
#      {
#        echo "release_package_name=$PACKAGE_FILE"
#        echo "release_package_url=${CI_SERVER_URL}/${PACKAGE_FILE}"
#        echo "release_package_link_type=other"
#        echo "release_package_direct_asset_path=${PACKAGE_FILE}"
#      } > release_after_script.env
  rules:
    - when: always
#    - if: $CI_COMMIT_TAG

#"package-$[[ inputs.collection-path ]]":
#  stage: package
#  dependencies:
#    - "build-$[[ inputs.collection-path ]]"
#  script:
#    - cd $COLLECTION_PATH
#    - export COLLECTION_ARCHIVE=$(ls *.tar.gz)
#    - |
#      curl -k -f --header "JOB-TOKEN: $CI_JOB_TOKEN" \
#        --upload-file $COLLECTION_ARCHIVE \
#        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGE_NAME/latest/$COLLECTION_ARCHIVE"
#  rules:
#    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
#      when: always
#    - when: never

#"release-$[[ inputs.collection-path ]]":
#  stage: release
#  dependencies:
#    - "build-$[[ inputs.collection-path ]]"
#  script:
#    - cd $COLLECTION_PATH
#    - export COLLECTION_ARCHIVE=$(ls *.tar.gz)
#    - |
#      curl -k -f --request POST --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
#           --form "name=Release $CI_COMMIT_TAG" \
#           --form "tag_name=$CI_COMMIT_TAG" \
#           --form "description=Automated release for tag $CI_COMMIT_TAG" \
#           --form "assets[links][][name]=$COLLECTION_ARCHIVE" \
#           --form "assets[links][][url]=$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGE_NAME/latest/$COLLECTION_ARCHIVE" \
#           "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases"
#
#  rules:
#    - if: '$CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ "^[0-9]+\\.[0-9]+\\.[0-9]+$"'
#      when: always
#    - when: never

